# A speed-run of Python basics

For people who are new to Python but have a small familiarity with programming. The informational text is interspersed with exercises, which you should complete.

## Want to speed-run this speed-run?

Almost every section has a "FINAL MODULE EXERCISE". Skip to that exercise and see if you can complete it.



**EXERCISE:** If the input to the function `square` is 2, what is the expected output?

**ANSWER**: *(Insert your answer here:4)*

import matplotlib.pyplot as plt
print("Matplotlib is installed and working!")



# Step 1: Define our function
def square(x):  # inputs to the function are placed inside the parentheses
    """Calculate the square of a function."""  # This line is called a "docstring"; it is optional but recommended! It lets you explain what the function does.
    return x**2  # define what the function returns. Note that ** is the power operator, * is multiply.

# Step 2: Define our inputs and then call the function
x = 2  # define a variable "x", which has a value of 2
y = square(x)  # call function "square" on variable x, and assign the output of "square" to variable "y"
print('The value of y is', y)  # print the value of variable "y" to the console

# Insert your code here!

z = square(16)  # Compute the square of 16
print('To answer the exercise the square of 16 is', z)  # Print the result






def evaluate_line(a, b, x):
    """Calculate y = a*x + b for a number x."""
    return a*x + b

# Example of calling evaluate_line
a, b, x = 1, 2, 1  # define function inputs (using "unpacking", which allows multiple variable definitions on the same line)
y = evaluate_line(a, b, x)  # call the function
print(f'The value of {a}*{x} + {b} is {y}')  # Here I've used f-string formatting for fancier printing. Look up a tutorial to get more info!

# Insert your code here!

def evaluate_parabola(a, b, c, x):
    """
    Calculate the value of a quadratic function y = ax^2 + bx + c for a given x.

    Parameters:
    a (float): Coefficient for x^2
    b (float): Coefficient for x
    c (float): Constant term
    x (float): Input value

    Returns:
    float: The computed value of y
    """
    return a * (x ** 2) + b * x + c  # ** is the power operator in Python

# To test the function by example
# We define coefficients and x value
a, b, c, x = 2, 3, 5, 4

# Call the function
y = evaluate_parabola(a, b, c, x)

# Print the result
print(f'The value of {a}*{x}^2 + {b}*{x} + {c} is {y}')






## 3. Strings and lists

Python is not limited to just numbers -- it can also be used to manipulate text and collections of objects.

Data that is of a textual nature is called a "string" object in Python. Strings can be manipulated, e.g., split and put back together. We will only cover the most basic of string operations here. Consider looking up more detailed tutorials on strings in Python if you find yourself manipulating strings a lot.

One of the most common thing we do with strings and other "iterable" objects (we'll come back to this later), is to isolate certain subsets of the object. For example, we want only the first element, or the last element.

**EXERCISE**:
 1. Read the code below. What you think the output will be?  
    (Insert your prediction here: 
    ### Prediction:
- `type(i_say)` will print `<class 'str'>` since `i_say` is a string.
- `i_say[0]` will print `'I'`, which is the first
- letter of `"I love cats!"`.
- `i_say[-1]` will print `'!'`, which is the last character.
- `i_say[1:-1]` will print `' love cats'` (everything from index `1` to index `-2`).)
                                                                              
 2. Run the code. Did you guess correctly?  
    (Insert your notes here:
    ### Notes:
- The `type()` function confirmed that `i_say` is a string.
- Python **uses zero-based indexing**, so `i_say[0]` returned `'I'`.
- Negative indexing **starts from the end**, so `i_say[-1]` returned `'!'`.
- The slice `i_say[1:-1]` **excluded** the first and last character (`'I'` and `'!'`).
- The final output matched my prediction.)




list_of_letters = ['a', 'b', 'c']  # a list of letters
list_of_numbers = [1, 2, 3]  # a list of numbers
mixed_list = ['a', 2, [3, 4]]  # a list of different types of objects: string, integer, and a list!

print('There are', len(mixed_list), 'elements in mixed_list.')  # evaluate the length of mixed_list, i.e., how many elements it contains.

long_text = 'I love cats quite a lot. And to be honest dogs are pretty cool as well. But nothing is quite like a good slice of cake.'

# Insert your code here!
# Here is the detailed solution and the description of the steps 
# Given text
long_text = 'I love cats quite a lot. And to be honest dogs are pretty cool as well. But nothing is quite like a good slice of cake.'

# Step 1: Split the text into sentences
sentences = long_text.split(".")
print("List of sentences:", sentences)

# Step 2: Isolate the second sentence
second_sentence = sentences[1]
print("Second sentence:", second_sentence)

# Step 3: Split the second sentence into words and count them
words_in_second_sentence = second_sentence.split()
word_count = len(words_in_second_sentence)

print("Words in second sentence:", words_in_second_sentence)
print("Number of words in second sentence:", word_count)






## 4. For and while loops

A loop is something occurs again and again, until a specified stop condition is met. There are two types of loops: ones that have a fixed number of iterations (for loops), and ones that iterate until a condition is satisfied (while loops). For loops are extremely common in science; for example, if you have a bunch of data files and you want to process each one the same way. While loops can be useful in numerical solvers for nonlinear equations.

### While loops: Iterate until a condition is met

What is the largest power of 2 that is less than 280? Let's say you need to calculate this for your research. Of course you can do it by clever usage of log-base-2, but how could we do this numerically? A while loop!

Below is an example of how we can use a while loop to solve this problem. We start with an initial guess, and then continuously multiply that initial guess until it becomes larger than our max value.

**EXERCISE**:
1. Write with pen and paper what the value for `x` should be for each iteration, and when the loop should finally stop. On what iteration will the loop stop?  

| **Iteration** | **x Value**  |
|--------------|-------------|
| 0           | 1           |
| 1           | 2           |
| 2           | 4           |
| 3           | 8           |
| 4           | 16          |
| 5           | 32          |
| 6           | 64          |
| 7           | 128         |
| 8           | 256         |
| 9           | 512 (ðŸš¨ Exceeds 280) |

ðŸ”¹ **The loop stops at Iteration 9**, when `x = 512` (which exceeds `280`).
                                                        
2. Why do we need to undo the last iteration?
- The last computed value of `x` was **512**, which **exceeds** 280.
- To get the correct **largest power of 2** **â‰¤ 280**, we must **undo the last step**.
- We achieve this using **integer division**:
  
  ```python
  x = x // 2       



def evaluate_line_list(a, b, inputs):
    """Map a list of inputs to a line according to y = a*x + b."""
    outputs = [None] * len(inputs)  # initialize our output list
    for index, x in enumerate(inputs):  # loop over our list of inputs, and use enumerate to get both the index and element
        y = evaluate_line(a, b, x)  # call the evaluate_line function from above
        outputs[index] = y  # assing the output to our output list
    return outputs  # return the list

# Example of calling evaluate_line_list
a, b, inputs = 2, 1, [1, 2, 3]
y = evaluate_line_list(a, b, inputs)
print(f'The output of line {a}x+{b} for {inputs} is {y}')

# TODO: Insert code here!
def evaluate_parabola_list(a, b, c, inputs):
    """Map a list of inputs to a parabola according to y = a*x^2 + b*x + c."""
    outputs = [None] * len(inputs)  # Initialize output list with placeholders
    for index, x in enumerate(inputs):  # Iterate through inputs with index
        y = a * (x ** 2) + b * x + c  # Calculate y using the quadratic formula
        outputs[index] = y  # Assign the result to the output list
    return outputs  # Return the list of results

# Example of calling evaluate_parabola_list
a, b, c = 1, -2, 3  # Example coefficients for y = x^2 - 2x + 3
inputs = [0, 1, 2, 3]  # List of x values
outputs = evaluate_parabola_list(a, b, c, inputs)

print(f'The output of the parabola {a}x^2 + {b}x + {c} for inputs {inputs} is {outputs}')





## 5. Plotting data with Matplotlib

For now, we will only go into the briefest example of using `matplotlib`. You can find many more examples and tutorials on the internet.

**FINAL MODULE EXERCISE**

  1. In the code cell below, where are the constants for the line ($a$ and $b$) and for the parabola ($a$, $b$ and $c$) defined?  
        * **ANSWER**: *(Insert your answer here: a_line, b_line = 2, 1 and a_parab, b_parab, c_parab = 0, 2, 1 !)*  
  2. Look at the code. What do you expect the plot to look like when you run it?  
        * **ANSWER**: *(Insert your answer here: The line should appear as a straight line with slope 2 and y-intercept 1. The parabola function is incorrectly using evaluate_line_list() instead of evaluate_parabola_list(), meaning it will also be a straight line. )*  
  3. Change the `y_parabola` variable so that, instead of calling `evaluate_line_list`, it calls your new function `evaluate_parabola_list`.  
  4. Mess around with the parabola constants and see how the plot changes. Does the result make sense? What do you observe?  
        * **ANSWER**: *(The parabola function is incorrectly using evaluate_line_list() instead of evaluate_parabola_list(), meaning it will also be a straight line. Change y_parabola so it calls evaluate_parabola_list() instead of evaluate_line_list() Experiment with different values of 
a,b,c and observe how the curve changes.)*  




















